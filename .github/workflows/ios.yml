name: IOS Release

# Controls when the workflow will run
on:

  # Triggers the workflow on push or pull request events for the "release" branch;
  # you can change it according to your requirement

  push:
#    types: [ closed ]
    branches: [ "prod" ]

  # Allows you to run this workflow manually from the Actions tab from your GitHub repo
  # (a workflow run is made up of one or more jobs that can run sequentially or in parallel)

  workflow_dispatch:

# currently Contains one job that do all process from build to deploy
jobs:
  build_ios:
    # to only merge if there is a merge action
#    if: github.event.pull_request.merged == true
    # Contains the type of runner that the job will run on
    runs-on: macos-latest


    # Uses steps to represent a sequence of tasks that will be executed as part of job
    steps:

      # Readies your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3.5.3
      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      

      # Sets up Flutter using the subosito Flutter workflow
      - uses: subosito/flutter-action@v2
        with:
          # Adjusts to the Flutter version you are working with
          flutter-version: "3.10.5"
          channel: 'stable'
          # enabling caching for the Flutter SDK
          cache: true

      # Runs a single command using the runnerâ€™s shell
      - name: Get dependencies
        run: flutter pub get

      # analyzing the app to know that there is an build issue or not
      - name: Run analyzer
        run: flutter analyze

      # Read the updated version from version1.txt file
      - name: Read release version
        id: read-version
        uses: NiklasLehnfeld/flutter-version-number-action@main
        with:
          file-path: pubspec.yaml

      # Build and sign the ipa using a single flutter command
      - name: Building IPA
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist

      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

      # Uploaded the IOS release as an artifact to be used in the next job
      - name: Upload IOS Release
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ios-release
          path: build/ios/ipa/*.ipa

      # creating github release
      - name: Create a Release in GitHub
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "build/ios/ipa/*.ipa"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: IOS_Release_${{ steps.read-version.outputs.version-number }}
          allowUpdates: true

      # upload app to app store
      - name: AppStore publish
        run: xcrun altool --upload-app --type ios -f build/ios/ipa/*.ipa --username ${{secrets.APPSTORE_USER_NAME}}  --password ${{secrets.APPSTORE_SPECIFIC_PASSWORD}}